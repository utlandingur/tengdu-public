import "@testing-library/jest-dom";
const mockResetPassword = jest.fn();

jest.mock("../../../providers/AuthProvider", () => {
  const originalModule = jest.requireActual("../../../providers/AuthProvider");

  return {
    ...originalModule,
    useSession: jest.fn(() => ({
      user: null,
      loading: false,
      error: null,
      resetPassword: mockResetPassword
    }))
  };
});

import React from "react";
import { fireEvent, waitFor } from "@testing-library/react";

import PasswordResetForm from "../../../components/PasswordResetForm";
import { useSession } from "../../../providers/AuthProvider";
import { renderWithAuthReact } from "../../../render";

describe("PasswordResetForm", () => {
  it("renders correctly", async () => {
    const { getByTestId } = renderWithAuthReact(<PasswordResetForm />, {});
    await waitFor(() =>
      expect(getByTestId("password-reset-form")).toBeDefined()
    );
    expect(getByTestId("Email-input")).toBeDefined();
    // Check if the button is in the document
    // Replace "Button Text" with the text of the button
    expect(getByTestId("reset-password-button")).toBeDefined();
  });
  it("calls resetPassword when the reset password button is pressed with a valid email", async () => {
    // Get the mock resetPassword function from the AuthProvider mock
    const { resetPassword } =
      require("../../../providers/AuthProvider").useSession();
    const { getByTestId } = renderWithAuthReact(<PasswordResetForm />, {});
    // Wait for the form to be in the document
    await waitFor(() =>
      expect(getByTestId("password-reset-form")).toBeDefined()
    );
    const email = "test@example.com";
    const emailInput = getByTestId("Email-input");
    fireEvent.change(emailInput, { target: { value: email } });
    expect((emailInput as HTMLInputElement).value).toBe(email);
    fireEvent.click(getByTestId("reset-password-button"));
    await waitFor(() => {
      expect(resetPassword).toHaveBeenCalledWith(email);
    });
  });
  it("shows error 'Reset password failed' when no email is entered", async () => {
    const { getByTestId, getByText } = renderWithAuthReact(
      <PasswordResetForm />,
      {}
    );
    fireEvent.click(getByTestId("reset-password-button"));
    await waitFor(() =>
      expect(getByText("Please enter a valid email address")).toBeTruthy()
    );
  });
  it("shows error message when resetPassword fails and email is entered", async () => {
    mockResetPassword.mockRejectedValue(new Error("Reset password failed"));
    const { getByTestId, getByText } = renderWithAuthReact(
      <PasswordResetForm />,
      {}
    );
    const email = "test@example.com";
    const emailInput = getByTestId("Email-input");
    fireEvent.change(emailInput, { target: { value: email } });
    fireEvent.click(getByTestId("reset-password-button"));
    await waitFor(() =>
      expect(getByText("Reset password failed")).toBeTruthy()
    );
  });
  it("hides error message when resetPassword succeeds and shows a success message", async () => {
    mockResetPassword.mockResolvedValue(undefined);
    const { queryByTestId, getByTestId } = renderWithAuthReact(
      <PasswordResetForm />,
      {}
    );
    const email = "test@example.com";
    const emailInput = getByTestId("Email-input");
    fireEvent.change(emailInput, { target: { value: email } });
    fireEvent.click(getByTestId("reset-password-button"));
    await waitFor(() => {
      expect(queryByTestId("Email-error-message")).toBeNull();
      expect(getByTestId("success-message")).toBeTruthy();
    });
  });
  it("disables the button while resetPassword is in progress", async () => {
    // Mock resetPassword to return a promise that resolves after a delay
    mockResetPassword.mockImplementation(
      () => new Promise((resolve) => setTimeout(resolve, 500))
    );
    const { getByTestId, queryByTestId } = renderWithAuthReact(
      <PasswordResetForm />,
      {}
    );
    const resetPasswordButton = getByTestId("reset-password-button");
    await waitFor(() => expect(resetPasswordButton.tabIndex).not.toBe(-1));

    const emailInput = getByTestId("Email-input");
    const email = "test@example.com";

    fireEvent.change(emailInput, { target: { value: email } });
    fireEvent.click(resetPasswordButton);
    await waitFor(() => {
      const button = getByTestId("reset-password-button");
      const style = window.getComputedStyle(button);
      expect(style.pointerEvents).toEqual("none");
    });
    // Wait for the promise to resolve and the button to be enabled again
    await waitFor(() => {
      expect(queryByTestId("Email-input")).toBeNull();
      expect(queryByTestId("reset-password-button")).toBeNull();
      expect(getByTestId("success-message").textContent).toEqual(
        "Link to reset password sent to test@example.com"
      );
      expect(getByTestId("password-success-login-button")).toBeDefined();
    });
  });
});
