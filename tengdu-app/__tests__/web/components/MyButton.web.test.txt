import React from "react";
import { fireEvent } from "@testing-library/react";

import MyButton from "../../../components/inputs/MyButton";
import { renderReact, renderSnapshot } from "../../../render";

describe("MyButton", () => {
  it("renders without crashing", () => {
    const { getByTestId } = renderReact(
      <MyButton
        type="primary"
        data-testid="my-button"
      >
        My Button
      </MyButton>,
      {}
    );

    const button = getByTestId("my-button");
    expect(button).toBeDefined();
  });
  it("renders primary types correctly", () => {
    const tree = renderSnapshot(
      <MyButton type="primary">button</MyButton>
    ).toJSON();
    const styles =
      tree.children[0].children[0].children[0].children[0].props.style;
    // expect(styles).toMatchSnapshot();
    expect(styles.backgroundColor).toBe("var(--color-5)");
    expect(styles.color).toBe("var(--color-6)");
  });
  it("renders secondary types correctly", () => {
    const tree = renderSnapshot(
      <MyButton type="secondary">button</MyButton>
    ).toJSON();
    const styles =
      tree.children[0].children[0].children[0].children[0].props.style;
    // expect(styles).toMatchSnapshot();
    expect(styles.backgroundColor).toBe("var(--color-7)");
    expect(styles.color).toBe("var(--color-8)");
  });
  it("renders tertiary types correctly", () => {
    const tree = renderSnapshot(
      <MyButton type="tertiary">button</MyButton>
    ).toJSON();
    const styles =
      tree.children[0].children[0].children[0].children[0].props.style;
    // expect(styles).toMatchSnapshot();
    expect(styles.backgroundColor).toBe("var(--color-9)");
    expect(styles.color).toBe("var(--color-10)");
  });
  it("renders danger types correctly", () => {
    const tree = renderSnapshot(
      <MyButton type="danger">button</MyButton>
    ).toJSON();
    const styles =
      tree.children[0].children[0].children[0].children[0].props.style;
    // expect(styles).toMatchSnapshot();
    expect(styles.backgroundColor).toBe("var(--color-11)");
    expect(styles.color).toBe("var(--color-12)");
  });
  it("calls onPress when pressed", () => {
    const onPress = jest.fn();
    const { getByTestId } = renderReact(
      <MyButton
        type="secondary"
        onPress={onPress}
        testID="MyButton"
      >
        button
      </MyButton>,
      {}
    );
    const button = getByTestId("MyButton");

    fireEvent.click(button);

    expect(onPress).toHaveBeenCalled();
  });
});
